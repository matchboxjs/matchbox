var factory = require("matchbox-factory")
var Intent = require("./Intent")
var InstanceExtension = require("matchbox-factory/InstanceExtension")

var Relay = factory({
  extensions: {
    intents: new InstanceExtension(function (relay, name, handler) {
      relay.intent(name, handler)
    })
  },

  constructor: function Relay(parent) {
    this.parent = parent || null
    this.active = true

    this._connections = []
    this._intents = {}
  },

  accessor: {
    root: function(){
      var component = this
      if (!component.parent) return component

      while (component.parent) {
        component = component.parent
      }

      return component
    }
  },

  prototype: {
    activate: function () {
      this.active = true
    },
    deactivate: function () {
      this.active = false
    },
    isConnectionAllowed: function (relay, behaviour) {
      if (!(relay instanceof Relay)) {
        // Not a Relay
        return false
      }
      if (this === relay) {
        // Connecting to self
        return false
      }
      if (relay.parent != null) {
        // checking for a parent should cover transfer from the same network
        // Transferring relays is not supported
        return false
      }
      if (this.isConnectedTo(relay)) {
        // Unable to connect: already connected
        return false
      }
      return true
    },
    isConnectedTo: function (relay) {
      return !!~this._connections.indexOf(relay)
    },
    connect: function (relay) {
      if (this.isConnectionAllowed(relay)) {
        return false
      }

      relay.parent = this
      this._connections.push(relay)

      return relay
    },
    intent: function (name, handler) {
      var filters = this._intents[name]
      if (!filters) {
        filters = this._intents[name] = []
      }
      filters.push(handler)
      return this
    },
    transmit: function (name, data) {
      var intent = data instanceof Intent ? data : new Intent(data)
      var promise = Promise.resolve(intent)
      var interruption = new Error("interrupted")

      switch (intent.direction) {
        case "bubble":
          var parent = this.parent
          while (parent) {
            handle(parent)
            parent = parent.parent
          }
          break
        case "capture":
        default:
          this.walk(handle)
      }

      function handle (relay) {
        var handlers = relay._intents[name]
        if (!Array.isArray(handlers)) {
          return
        }

        handlers = handlers.map(function (handler) {
          return promise.then(function () {
            return handler.call(relay, intent)
          }).then(function () {
            if (intent.interrupted) {
              throw interruption
            }
          })
        })

        promise = Promise.all(handlers)
      }

      promise.catch(function (err) {
        if (err === interruption) {
          return intent
        }
        throw err
      })

      return promise
    },
    walk: function (cb) {
      var relay = this

      if (cb(relay) === false) {
        return false
      }

      var connections = relay._connections
      var l = connections.length

      if (!l) return true

      var stack = []
      var i = -1

      while (++i < l) {
        relay = connections[i]
        if (cb(relay) === false) {
          return false
        }

        // save state/progress and change list to sub components
        if (relay._connections.length) {
          stack.push([i, connections])
          connections = relay._connections
          i = -1
          l = connections.length
        }
        // restore state/progress to previous relay list
        else restoreStack()
      }

      function restoreStack () {
        while (i + 1 == l && stack.length) {
          i = stack.pop()
          connections = i[1]
          i = i[0]
          l = connections.length
        }
      }

      return true
    }
  }
})
