var factory = require("matchbox-factory")
var Intent = require("./Intent")
var InstanceExtension = require("matchbox-factory/InstanceExtension")

var Relay = factory({
  extensions: {
    intents: new InstanceExtension(function (relay, name, handler) {
      relay.intent(name, handler)
    })
  },

  constructor: function Relay(name, parent) {
    this.name = name || ""
    this.parent = parent || null
    this.active = true

    this._connections = []
    this._intents = {}
  },

  accessor: {
    root: function(){
      var component = this
      if (!component.parent) return component

      while (component.parent) {
        component = component.parent
      }

      return component
    }
  },

  prototype: {
    activate: function () {
      this.active = true
    },
    deactivate: function () {
      this.active = false
    },
    connect: function (relay) {
      if ((relay instanceof Relay)) {
        throw new Error("Not a Relay")
      }
      if (this === relay) {
        throw new Error("Connecting to self")
      }
      if (relay.parent != null) {
        // checking for a parent should cover transfer from the same network
        throw new Error("Transferring relays is not supported")
      }
      if (this.isConnectedTo(relay)) {
        throw new Error("Unable to connect: already connected")
      }

      relay.parent = this
      this._connections.push(relay)

      return relay
    },
    isConnectedTo: function (relay) {
      return !!~this._connections.indexOf(relay)
    },
    walk: function (cb) {
      var relay = this

      if (cb(relay) === false) {
        return false
      }

      var connections = relay._connections
      var l = connections.length

      if (!l) return true

      var stack = []
      var i = -1

      while (++i < l) {
        relay = connections[i]
        if (cb(relay) === false) {
          return false
        }

        // save state/progress and change list to sub components
        if (relay._connection.length) {
          stack.push([i, connections])
          connections = relay._connection
          i = -1
          l = connections.length
        }
        // restore state/progress to previous relay list
        else restoreStack()
      }

      function restoreStack () {
        while (i + 1 == l && stack.length) {
          i = stack.pop()
          connections = i[1]
          i = i[0]
          l = connections.length
        }
      }

      return true
    },
    transmit: function (name, data, source, upward) {
      source = source || this.root
      var intent = data instanceof Intent ? data : new Intent(data)
      var promise = Promise.resolve(intent)
      var interruption = new Error("interrupted")

      if (upward) {
        var parent = source.parent
        while (parent) {
          handle(parent)
          parent = parent.parent
        }
      }
      else {
        source.walk(handle)
      }

      function handle (relay) {
        var filters = relay._intents[name]
        if (!Array.isArray(filters)) {
          return
        }
        filters.forEach(function (handler) {
          promise.then(function () {
            return handler(intent)
          }).then(function () {
            if (intent.interrupted) {
              throw interruption
            }
          })
        })
      }

      promise.catch(function (err) {
        if (err === interruption) {
          return intent
        }
        throw err
      })

      return promise
    },
    intent: function (name, handler) {
      var filters = this._intents[name]
      if (!filters) {
        filters = this._intents[name] = []
      }
      filters.push(handler)
      return this
    }
  }
})
